#!/usr/bin/env python3
"""
Script para reiniciar a aplica√ß√£o de forma limpa
"""

import os
import sys
import time
import signal
import subprocess
import psutil

def find_python_processes():
    """Encontra processos Python relacionados √† aplica√ß√£o"""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = proc.info['cmdline']
                if cmdline and any('app.py' in arg for arg in cmdline):
                    processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    return processes

def stop_processes(processes):
    """Para os processos de forma segura"""
    if not processes:
        print("‚ÑπÔ∏è Nenhum processo Python da aplica√ß√£o encontrado")
        return True
    
    print(f"üõë Encontrados {len(processes)} processos para parar...")
    
    for proc in processes:
        try:
            print(f"   Parando processo {proc.pid}...")
            proc.terminate()
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            print(f"   ‚ö†Ô∏è Erro ao parar processo {proc.pid}: {e}")
    
    # Aguarda os processos terminarem
    print("‚è≥ Aguardando processos terminarem...")
    time.sleep(3)
    
    # For√ßa parada se necess√°rio
    for proc in processes:
        try:
            if proc.is_running():
                print(f"   For√ßando parada do processo {proc.pid}...")
                proc.kill()
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    return True

def check_session_file():
    """Verifica se o arquivo de sess√£o est√° acess√≠vel"""
    session_file = "bot_session.session"
    
    if not os.path.exists(session_file):
        print("‚ùå Arquivo de sess√£o n√£o encontrado!")
        return False
    
    try:
        import sqlite3
        conn = sqlite3.connect(session_file, timeout=5.0)
        conn.close()
        print("‚úÖ Arquivo de sess√£o acess√≠vel")
        return True
    except Exception as e:
        print(f"‚ùå Problema com arquivo de sess√£o: {e}")
        return False

def start_application():
    """Inicia a aplica√ß√£o"""
    print("üöÄ Iniciando aplica√ß√£o...")
    
    try:
        # Verifica se o arquivo app.py existe
        if not os.path.exists("app.py"):
            print("‚ùå Arquivo app.py n√£o encontrado!")
            return False
        
        # Inicia a aplica√ß√£o em background
        process = subprocess.Popen([
            sys.executable, "app.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        print(f"‚úÖ Aplica√ß√£o iniciada com PID: {process.pid}")
        print("üåê Acesse: http://localhost:8000")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîÑ Reiniciando aplica√ß√£o...")
    print("=" * 40)
    
    # 1. Para processos existentes
    processes = find_python_processes()
    if not stop_processes(processes):
        print("‚ùå Erro ao parar processos")
        return
    
    # 2. Aguarda um pouco
    print("‚è≥ Aguardando 2 segundos...")
    time.sleep(2)
    
    # 3. Verifica arquivo de sess√£o
    print("\nüîç Verificando arquivo de sess√£o...")
    if not check_session_file():
        print("‚ö†Ô∏è Problemas detectados no arquivo de sess√£o")
        print("üí° Execute: python fix_session.py")
        return
    
    # 4. Inicia a aplica√ß√£o
    print("\nüöÄ Iniciando nova inst√¢ncia...")
    if not start_application():
        print("‚ùå Erro ao iniciar aplica√ß√£o")
        return
    
    print("\n‚úÖ Reinicializa√ß√£o conclu√≠da!")

if __name__ == "__main__":
    main() 